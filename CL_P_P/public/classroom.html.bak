<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Classroom</title>
  <link rel="stylesheet" href="css/styles.css">
  <style>
    body, html {
      margin: 0;
      padding: 0;
      height: 100%;
    }
    .container {
      display: flex;
      height: 100vh;
    }
    .sidebar {
      width: 220px;
      transition: width 0.3s;
      display: flex;
      flex-direction: column;
      padding: 10px;
    }
    .sidebar.collapsed {
      width: 60px;
    }
    .tabs {
      display: flex;
      flex-direction: column;
      margin-top: 20px;
      flex: 1;
    }
    .tab {
      padding: 10px;
      margin-bottom: 5px;
      border-radius: 6px;
      cursor: pointer;
      text-align: left;
      font-size: 14px;
    }
    .tab.active {
      font-weight: bold;
    }
    .content {
      flex: 1;
      padding: 20px;
      overflow-y: auto;
      transition: background 0.3s, color 0.3s;
    }
    .card {
      display: none;
    }
    .card.active {
      display: block;
    }
    .chat-box {
      border-radius: 6px;
      padding: 10px;
      height: 200px;
      overflow-y: auto;
      margin-bottom: 10px;
    }
    .file-list { margin-top:10px; }
    .file-item { padding:5px 0; }
    .hidden { display:none; }

    /* Light theme */
    body[data-theme="light"] {
      background: #fff;
      color: #222;
    }
    body[data-theme="light"] .sidebar {
      background: #f5f5f5;
      color: #111;
      border-right: 1px solid #ddd;
    }
    body[data-theme="light"] .tab {
      background: #eee;
    }
    body[data-theme="light"] .tab.active {
      background: #cce5ff;
    }
    body[data-theme="light"] .chat-box {
      background: #fafafa;
      border: 1px solid #ccc;
      color: #111;
    }

    /* Dark theme (GitHub dark) */
    body[data-theme="dark"] {
      background: #0d1117;
      color: #c9d1d9;
    }
    body[data-theme="dark"] .sidebar {
      background: #161b22;
      color: #c9d1d9;
      border-right: 1px solid #30363d;
    }
    body[data-theme="dark"] .tab {
      background: #21262d;
      color: #c9d1d9;
    }
    body[data-theme="dark"] .tab.active {
      background: #1f6feb;
      color: #fff;
    }
    body[data-theme="dark"] .chat-box {
      background: #161b22;
      border: 1px solid #30363d;
      color: #c9d1d9;
    }
  </style>
</head>
<body data-theme="light">
  <div class="container">
    <!-- Sidebar -->
    <aside class="sidebar" id="sidebar">
      <button class="btn secondary" id="toggleSidebar">‚ò∞</button>
      <h2 id="clsName">üìö Classroom</h2>
      <div class="tabs">
        <div class="tab active" data-tab="lectures">üìñ Lectures</div>
        <div class="tab" data-tab="chat">üí¨ Chat</div>
        <div class="tab" data-tab="progress">üìä Progress</div>
        <div class="tab" data-tab="quizzes">üìù Quizzes</div>
        <div class="tab" data-tab="meet">üé• Meet</div>
        <div class="tab" data-tab="chatbot">ü§ñ Chatbot</div>
      </div>
      <div style="margin-top:auto;">
        <button class="btn secondary" id="themeToggle">üåì Theme</button>
        <button class="btn secondary" onclick="history.back()">‚Üê Back</button>
      </div>
    </aside>

    <!-- Content Area -->
    <main class="content">
      <!-- Lectures -->
      <div id="lectures" class="card active">
        <h3>Lectures</h3>
        <div id="uploadLectures" class="hidden">
          <input type="file" id="lectureFile" accept=".pdf,video/*">
          <button id="uploadLectureBtn" class="btn">Upload</button>
        </div>
        <div id="lecturesList" class="file-list"></div>
      </div>

      <!-- Chat -->
      <div id="chat" class="card">
        <h3>Class Chat</h3>
        <div id="chatBox" class="chat-box"></div>
        <textarea id="chatInput" class="input" placeholder="Type message... (Enter=send, Shift+Enter=newline)"></textarea>
        <button class="btn" id="chatSend">Send</button>
      </div>

      <!-- Progress -->
      <div id="progress" class="card">
        <h3>Progress (Teacher Only)</h3>
        <ul id="progressList"></ul>
      </div>

      <!-- Quizzes -->
      <div id="quizzes" class="card">
        <h3>Quizzes</h3>
        <div id="uploadQuiz" class="hidden">
          <input type="file" id="quizFile" accept=".pdf">
          <button id="uploadQuizBtn" class="btn">Upload Quiz</button>
        </div>
        <div id="quizList" class="file-list"></div>
        <div id="studentAnswerUpload" class="hidden" style="margin-top:15px;">
          <h4>Upload Your Answer (PDF ‚â§20MB)</h4>
          <input type="file" id="answerFile" accept=".pdf">
          <button id="uploadAnswerBtn" class="btn">Upload Answer</button>
        </div>
      </div>

      <!-- Meet -->
      <div id="meet" class="card">
        <h3>Meet</h3>
        <div class="row" id="meetControls">
          <button class="btn" id="createMeet" style="display:none;">Create Meet (Teacher)</button>
          <button class="btn" id="inviteBtn" style="display:none;">Invite</button>
          <button class="btn danger" id="kickBtn" style="display:none;">Kick</button>
          <button class="btn" id="joinBtn">Join</button>
          <button class="btn secondary" id="muteBtn">Mute</button>
          <button class="btn secondary" id="unmuteBtn">Unmute</button>
          <button class="btn danger" id="leaveBtn">Leave</button>
          <button class="btn secondary" id="shareBtn" style="display:none;">Share Screen</button>
        </div>
        <div class="meet">
          <video id="localVideo" autoplay muted playsinline></video>
          <div id="remoteVideos" class="grid"></div>
        </div>
        <div style="margin-top:8px;"><span class="badge">Participants:</span> <span id="participants"></span></div>
      </div>

      <!-- Chatbot -->
      <div id="chatbot" class="card">
        <h3>Chatbot</h3>
        <div id="chatbotBox" class="chat-box"></div>
        <textarea id="chatbotInput" class="input" placeholder="Ask the bot... (Enter=send, Shift+Enter=newline)"></textarea>
        <button class="btn" id="chatbotSend">Send</button>
      </div>
    </main>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="js/api.js"></script>
  <script src="js/meet.js"></script>
  <script>
    const tabs = document.querySelectorAll('.tab');
    const panes = {
      lectures: document.getElementById('lectures'),
      chat: document.getElementById('chat'),
      progress: document.getElementById('progress'),
      quizzes: document.getElementById('quizzes'),
      meet: document.getElementById('meet'),
      chatbot: document.getElementById('chatbot')
    };

    tabs.forEach(t => t.onclick = () => {
      tabs.forEach(x => x.classList.remove('active'));
      t.classList.add('active');
      Object.values(panes).forEach(p => p.classList.remove('active'));
      panes[t.dataset.tab].classList.add('active');
    });

    const params = new URLSearchParams(location.search);
    const classroomId = params.get('id');

    function setupEnterToSend(id, sendFn) {
      const input = document.getElementById(id);
      input.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendFn();
        }
      });
    }

    // Theme toggle
    document.getElementById("themeToggle").onclick = () => {
      const cur = document.body.getAttribute("data-theme");
      document.body.setAttribute("data-theme", cur === "light" ? "dark" : "light");
    };

    // Sidebar collapse
    document.getElementById("toggleSidebar").onclick = () => {
      document.getElementById("sidebar").classList.toggle("collapsed");
    };

    (async () => {
      const { user } = await me();
      const cls = await apiAuth('/api/classrooms/' + classroomId);
      document.getElementById('clsName').textContent = 'üìö ' + cls.name;

      const socket = io();
      socket.emit('join-room', { roomId: classroomId, user });

      if (user.role === 'teacher') {
        document.getElementById('uploadLectures').classList.remove('hidden');
        document.getElementById('uploadQuiz').classList.remove('hidden');
      } else {
        document.getElementById('studentAnswerUpload').classList.remove('hidden');
      }

      // Progress
      const progressList = document.getElementById('progressList');
      if (user.role === 'teacher') {
        socket.on('participants', (list) => {
          progressList.innerHTML = "";
          list.forEach(s => {
            const li = document.createElement("li");
            li.textContent = `${s.name} (ID: ${s.id})`;
            progressList.appendChild(li);
          });
        });
      }

      // Chat
      const chatBox = document.getElementById('chatBox');
      document.getElementById('chatSend').onclick = () => {
        const text = document.getElementById('chatInput').value.trim();
        if (!text) return;
        socket.emit('chat', { roomId: classroomId, from: user.name, text });
        document.getElementById('chatInput').value = '';
      };
      socket.on('chat', (msg) => {
        const p = document.createElement('div');
        p.textContent = msg.from + ': ' + msg.text;
        chatBox.appendChild(p);
        chatBox.scrollTop = chatBox.scrollHeight;
      });
      setupEnterToSend('chatInput', () => document.getElementById('chatSend').click());

      // Chatbot
      function sendBot() {
        const input = document.getElementById('chatbotInput');
        const text = input.value.trim();
        if (!text) return;
        const box = document.getElementById('chatbotBox');
        box.innerHTML += `<p><b>You:</b> ${text}</p>`;
        input.value = '';
        setTimeout(() => {
          box.innerHTML += `<p><b>Bot:</b> I received "${text}"</p>`;
          box.scrollTop = box.scrollHeight;
        }, 500);
      }
      document.getElementById('chatbotSend').onclick = sendBot;
      setupEnterToSend('chatbotInput', sendBot);

      // Meet controls
      if (user.role === 'teacher') {
        document.getElementById('createMeet').style.display = 'inline-block';
        document.getElementById('inviteBtn').style.display = 'inline-block';
        document.getElementById('kickBtn').style.display = 'inline-block';
        document.getElementById('shareBtn').style.display = 'inline-block';
      }
      initMeet(socket, classroomId, user);
    })();
  </script>
</body>
</html>
